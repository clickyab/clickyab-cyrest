// Code generated by go-bindata.
// sources:
// db/migrations/.gitignore
// db/migrations/20160117193701_user_base.sql
// db/migrations/20160204180633_balance.sql
// db/migrations/20160225223636_translation.sql
// db/migrations/20160227183304_remove_initial.sql
// db/migrations/20160229195248_acc_no_unit.sql
// db/migrations/20160304235607_rebuild-acc.sql
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dbMigrationsGitignore = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\xe2\x52\xd4\x4b\xcf\x2c\xc9\x4c\xcf\xcb\x2f\x4a\x05\x04\x00\x00\xff\xff\xc0\x34\x2f\x29\x0d\x00\x00\x00"

func dbMigrationsGitignoreBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrationsGitignore,
		"db/migrations/.gitignore",
	)
}

func dbMigrationsGitignore() (*asset, error) {
	bytes, err := dbMigrationsGitignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/.gitignore", size: 13, mode: os.FileMode(420), modTime: time.Unix(1457010334, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dbMigrations20160117193701_user_baseSql = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x57\x6f\x6f\xe2\xc6\x13\x7e\xef\x4f\x31\x8a\x22\x19\xf4\xe3\x22\x20\x77\x97\x44\x3f\x55\xaa\x0f\x2f\x09\x3d\x62\x88\x81\x26\x69\x55\x59\x0b\xbb\x21\xdb\x80\xd7\xb7\xbb\x84\x90\xaa\xdf\xbd\xbb\x8b\x0d\x06\xcc\x85\xab\x7a\xaa\xfa\xca\xde\x3f\x33\x7e\xf6\x99\x67\xc6\xb3\xce\xbb\x77\xf0\xbf\x29\x1b\x0b\xac\x28\x0c\x12\x33\xec\xdd\xb4\x81\xc5\x20\xe9\x48\x31\x1e\x83\x3b\x48\x5c\x60\x12\xe8\x0b\x1d\xcd\x14\x25\x30\x7f\xa4\x31\xa8\x47\x3d\xb5\xb4\x33\x9b\xf4\x00\x27\xc9\x84\x51\xe2\x38\x8d\x10\x79\x7d\x04\xbd\xc6\x15\xba\xf6\x00\x63\xfc\xff\xd5\x5c\xff\xbe\x8b\xcc\xcc\xc9\x4c\x52\x11\x49\x85\xd5\x4c\x82\xd7\x73\x50\x30\xb8\x86\x92\x2b\xe8\x98\x49\x45\x05\x25\x6e\xc5\x7d\xa6\x82\x3d\x30\xfb\x3a\xc4\x71\xac\x5f\xca\x39\x47\xde\xa7\xf6\xd2\x93\xe0\x13\x2a\x4b\x0e\x00\x23\x30\x64\x63\xed\x97\xe1\x09\x04\x9d\x3e\x04\x83\x76\xbb\xa2\x17\x62\x3c\xa5\xf0\x8c\xc5\xe8\x11\x8b\x8d\x05\x42\xe5\x48\xb0\xc4\x1e\xe0\x67\x2f\x6c\x5c\x79\xa1\x99\x16\x54\xf2\x99\x18\x51\x99\x4d\xfe\xfa\x9b\x99\x1e\x09\xaa\x39\x22\x11\x56\xa0\xd8\x94\x6a\xf0\xd3\x04\xe6\x4c\x3d\xda\x21\xbc\xf2\x98\x82\x8f\x9a\xde\xa0\xad\xbf\xd0\xb9\x2d\x95\x8d\xd1\x2c\x21\xdf\x6e\xd4\xe8\x04\xbd\x7e\xe8\xb5\x82\x3e\xd8\xd3\x45\x0a\x0f\x27\x34\x4a\x04\x9b\x62\xb1\x80\x6e\xd8\xba\xf6\xc2\x7b\xf8\x8c\xee\xa1\xc4\x48\xd9\x29\xe4\xc5\x30\xfc\x75\x5e\xcc\x8e\xbd\xdc\x24\x58\xca\x39\x17\xa4\x70\x71\xc4\x63\x85\x47\xaa\x70\x4d\xf1\x27\x2d\x8f\x42\xab\x03\x08\xcc\xf6\xff\x3d\x26\xf7\x5b\x4f\xb0\x54\xd1\x84\x8f\xb5\xae\xdf\x8e\x43\x8a\x37\x95\xe7\xb6\x5c\x77\x3e\xb2\x21\x5b\x6d\x87\x95\x12\x6c\xa8\x53\x45\xc2\xef\x92\xc7\xc3\x02\x8b\x3f\xfe\x74\xb7\x02\x6d\xc3\x15\x31\xb2\x37\xca\x05\xfb\x23\x13\xbd\x68\x16\xb3\x2f\x33\x9d\xbb\x41\xeb\x66\x80\xa0\x94\x45\xb5\xc8\x40\x46\x69\xe4\xb6\x8d\xd2\xe9\xb2\xb3\x5f\x4b\xd1\x2a\xd1\xec\x68\xa9\x2a\x16\x2b\x9b\x31\x7a\x69\x73\x66\x1b\xa9\xdd\x91\x3c\x6d\x9e\x2a\x75\x54\x49\xcd\xf7\x08\x59\xa7\x23\x15\xcf\x3a\xf2\x6f\x2b\xfa\xbf\xa7\xcb\x7c\xaa\x67\xe7\x4c\x4f\x21\x33\x29\x18\x66\xdf\x50\x43\xce\x96\xac\x0a\x45\xf4\x44\x17\x87\x46\x58\x03\x97\x78\x4c\x4d\x8a\x7c\x9d\xe2\x21\x27\x0b\x50\xf4\x45\x1d\x4c\xfc\x94\x12\x86\x23\xb5\x48\x8a\x0b\xcd\xbf\xc9\xfe\xae\x92\x73\x9c\xe6\x28\xd9\x60\x74\xa7\xfc\xe6\x19\x6d\x05\x3e\xba\x4b\x73\x2d\xcb\xc4\x88\xc5\x84\xbe\x40\x27\x58\xd7\x65\xfd\xa5\x41\xaf\x15\x5c\xc2\x50\x09\x4a\xf5\xc8\x70\xbe\xae\xc8\x7a\xb0\xc7\xa7\x55\xf1\xe1\x0e\xed\xf6\x22\x6f\x36\xe5\x76\xc1\xd9\x1c\xdf\xe3\x2b\x07\xcc\x6b\xf7\x51\x58\x58\x1f\xc0\xf3\xfd\xdd\xaa\xf3\xf0\x04\xcd\x4e\x88\x5a\x97\xc1\x46\xe2\x97\x9d\x10\x35\x51\x88\x82\x06\xea\xad\x8f\x62\x49\x85\x6b\xaf\xdf\xb8\x82\xa6\x0e\x9b\xa3\xb1\xf9\xa8\x8d\x34\xf6\x86\xd7\x6b\x78\x3e\x32\x68\x07\x5d\xdf\x5b\xcf\x7c\x13\xa6\xe5\x3f\x75\x1b\xd3\xaa\x08\x6d\x61\x5a\xba\xf8\x67\x30\xe5\xb3\xec\xfb\x32\xd5\x43\xa9\xe6\x8b\x60\xb5\x82\x1e\x0a\xfb\x5a\x09\xfd\x4e\xfe\x88\x26\xc0\x95\x7c\x53\x54\x59\xb7\x42\x95\x5c\x9e\x56\x72\x59\x57\xd6\x3d\x52\x7b\xa0\x41\x95\x5c\x03\xc9\xad\x80\x4b\xe8\x03\x9e\x4d\x94\xa5\xd9\xf6\x91\x0b\xfd\x6f\x9c\x9a\x15\xf3\xd7\x03\x37\xe6\xf3\xec\xa1\xb5\xf4\x7d\xb0\x08\xce\x95\xf9\x88\x79\xc2\x58\xf0\x59\xb2\x85\x64\xcc\x49\x01\x18\xdd\xfc\x76\xb3\xbe\x47\x77\xb4\x43\xa6\x70\xad\x7e\xba\x83\x31\x25\xff\x28\x4b\xd7\xa3\x0a\x1c\x65\xfd\x92\x79\x4f\xab\xa1\x7e\x85\x23\x9b\x81\x47\x39\x68\x98\x4c\x59\x6c\xbe\x79\x5c\xc7\xc7\xb5\xea\xf1\xc7\x5b\xfa\xa9\x73\x7b\x13\xd7\x1b\xf3\xfb\x57\x2e\x59\xf7\x73\x95\xb1\x93\x8f\x77\xec\xb6\x26\x54\xf5\xf1\x17\xff\x94\xdd\xf9\x12\x2f\x7a\x97\xfc\x24\x6c\xf3\x9f\x06\xcd\x39\xf9\xa2\x7b\x62\xeb\xe7\x47\xfc\x3a\xe5\x3c\xc6\x27\x23\x6e\xce\x05\x6e\xfd\x43\x0d\xd7\xaa\xb5\x8b\x87\xda\xe9\x59\xf5\xec\xfd\xd9\xb0\x5a\xbd\x38\x25\x1f\xe8\xc5\x59\xad\x5e\xab\xbf\x27\xf8\xfc\xbc\x5a\x3f\x7f\xb8\x48\x4f\xeb\x11\x02\x78\x32\x59\xa6\x84\xae\x16\x60\xbd\x5a\x2d\x16\x9e\x3a\x4d\xa8\xd5\x9f\x3b\xfb\xf3\x97\xb5\xe0\xda\xa8\xd1\x87\x52\xfa\xd4\x45\xb5\x19\x76\xae\x73\x74\xdd\x5e\x69\xfd\xae\x2a\xdc\x0f\x29\x0f\xe5\x55\x0d\x5e\xfa\x92\x27\xfa\x35\x6b\x27\x56\x1e\xec\x8a\x16\x6e\xfe\xae\xe2\xf3\x79\x9c\xdd\x56\x56\x57\x15\x33\x79\xd0\x65\x45\x7b\x9c\xe8\xd5\x21\x1e\x3d\x39\x8e\x1f\x76\xba\xb9\xeb\xca\x3a\x53\xfe\x0a\x00\x00\xff\xff\xbe\x3e\x91\x18\x1d\x0d\x00\x00"

func dbMigrations20160117193701_user_baseSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations20160117193701_user_baseSql,
		"db/migrations/20160117193701_user_base.sql",
	)
}

func dbMigrations20160117193701_user_baseSql() (*asset, error) {
	bytes, err := dbMigrations20160117193701_user_baseSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/20160117193701_user_base.sql", size: 3357, mode: os.FileMode(420), modTime: time.Unix(1457124172, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dbMigrations20160204180633_balanceSql = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x58\xdb\x6e\xdb\x46\x10\x7d\x0e\xbf\x62\x1a\x04\x90\x84\xd8\x46\xf2\x1a\xd7\x05\x18\x69\x25\xb3\xa1\x49\x87\x17\x38\x41\x51\x10\x94\xb8\x96\x19\x4b\x24\x43\xae\x9a\x38\x6d\xff\xbd\xb3\x17\xde\x44\x4a\xb5\x14\x37\x40\x05\x24\x96\x56\xb3\xb3\x67\xce\x9c\x99\x59\x4a\x3b\x3d\x85\x97\xeb\x78\x99\x87\x8c\x82\x9f\xf1\x8f\xee\x7b\x13\xe2\x04\x0a\xba\x60\x71\x9a\xc0\xc0\xcf\x06\x10\x17\x40\xbf\xd2\xc5\x86\xd1\x08\xbe\xdc\xd1\x04\xd8\x1d\x2e\xc9\x7d\xdc\x08\x3f\x84\x59\xb6\x8a\x69\xa4\x69\x63\x87\xe8\x1e\x01\x77\x7c\x49\xae\x74\x08\x17\x8b\xf3\x6a\xcd\xd3\xdf\x9a\x84\x2f\x9d\x6d\x92\x98\x15\x43\x0d\x20\xfd\x92\xd0\x3c\x88\x23\x98\xc7\xcb\x38\x61\x27\xb8\xc4\x62\xb6\xa2\xf0\x47\x98\x2f\xee\xc2\x1c\x2c\xdb\x03\xcb\x37\x4d\xfe\x4d\x44\x8b\x45\x1e\x67\xe2\x48\x46\xbf\x0a\xeb\x45\x4e\x11\x7b\x14\x84\x0c\x37\xae\x69\xc1\xc2\x75\x06\x5f\x62\x76\x27\x3e\xc2\xb7\x34\xa1\x95\x0f\x98\x90\xa9\xee\x9b\xf8\xc1\xbe\x19\x8e\xf8\xee\x4d\x16\x7d\xc7\xee\x90\xb1\x3c\x9e\x23\x2b\x05\x7c\x2a\xd2\x64\xde\x35\x1d\xfc\xf9\xf7\x80\x5b\x8e\x6d\xcb\xf5\x1c\xdd\xb0\x3c\x10\xa1\x07\xd9\x3d\x5c\x3b\xc6\x95\xee\x7c\x84\x77\xe4\x23\x0c\x4b\x1e\x46\x9a\x36\xea\x23\x0c\xff\xa5\x9b\x44\x72\x26\xd9\x2a\x68\x1e\x87\xab\x16\x3f\xdc\xf5\xff\x95\xcb\x18\xb1\xf3\x78\x24\xf6\xae\xe1\xab\xc3\x08\x5f\x6c\xf2\x9c\xa2\x9f\xbd\xee\xa2\xb8\x08\xe7\x2b\xd4\xf4\x3c\x4d\x57\x5d\x9b\xdb\x70\x55\xd0\xad\xec\x95\x79\x08\xb2\x3c\x5e\x87\xf9\x43\x70\x4f\x1f\x8a\x76\x2a\x77\x27\x91\xe5\x61\x52\x84\xa2\xae\xf6\x27\xf2\x90\x44\x1c\x4a\xbd\xe0\x71\xcd\x83\xd8\x26\x67\x97\x2c\x54\xcc\xb5\xb2\xda\x67\x17\xcd\x02\x6e\x7d\xd5\xe0\xad\x19\x7a\x93\xbb\x0e\x75\xdb\x7c\x0b\xa4\xc1\x7a\x53\xb0\x20\x49\x59\x30\xa7\xc1\x37\x9a\xa7\x80\xdd\x65\xfc\x0e\x86\x2a\x90\x9f\x7f\x81\x57\x8f\x20\x3d\x60\xe1\x52\x10\xdf\x5c\x6b\xd7\x0b\x1a\x94\xe5\xf2\xdb\xef\xbb\x63\x10\x9e\x3a\x45\xdc\x76\xbb\x0b\x90\xa8\x52\x89\xe4\xd9\x0e\x05\x3c\xc3\xaf\x05\xfd\xcd\x35\x91\x04\xac\x13\x46\x97\x34\x6f\x0a\xf9\x59\xbb\xee\xab\x3d\xfc\x78\x6c\xe8\x51\xb4\x3a\xa5\x49\x04\xa7\xa7\x1a\xff\x98\xce\x3f\x61\x6b\x7f\xa3\xfa\xd0\xed\x3d\xfc\x05\xec\x21\xa3\x6f\x9a\x91\xa2\x29\x5a\xea\xa6\x47\x9c\x3e\xe0\x30\x71\xec\xeb\xa6\xbd\x31\x05\xf2\xc1\x70\x3d\xb7\xf6\x3a\xd6\xdd\xb1\x3e\x21\xe7\xda\x6e\x2f\xfa\x64\xd2\x6d\x8c\xb8\x75\x6a\x3b\xc4\x98\x59\x92\x53\x15\xdb\x48\x73\xc8\x94\x38\xc4\x1a\x13\xb7\x9e\x20\x8d\xbe\x09\x57\xba\x37\xbe\x84\x29\x8f\xdb\xb6\x90\x1e\x93\x20\xeb\x0e\x41\xef\xc6\xd8\x03\x5c\xf2\xaf\x27\x3c\x11\x15\xb0\xfd\xd4\x70\x88\xc1\xe6\xf3\xd3\xb3\x53\x3a\x3e\x8e\xa0\x72\xb7\x6f\x19\xef\x7d\x82\x92\x0b\x97\x27\x25\x45\x28\xb6\x1d\x6a\xe3\x35\x2a\x84\xdf\x9d\x10\xed\xf2\xe5\x2b\x19\xcd\xd7\x71\x51\xf0\x4a\x3d\x70\xac\xc9\x73\x3a\x65\xa1\x0e\x3d\x51\x47\xa9\xba\xe8\x0d\x5b\x38\xf8\x11\xc2\x50\xec\xf7\xe9\xe2\x10\x64\x22\xde\x0e\xb2\x32\xce\x26\xb2\x30\x3c\x93\x2e\x86\x47\x61\x52\x79\x35\xac\x09\xf9\x50\x35\x64\x45\x41\x70\x9b\xe6\x34\x5e\x26\x7c\x63\xf3\xae\xa0\xf9\xae\x61\xcd\x60\xce\x72\x4a\xb5\x46\xf6\x9b\x6d\x49\x3a\x6c\x36\xae\xaa\xdb\x27\x11\xfd\x5a\xba\x6c\xb6\xef\x8e\xdb\x7a\x3e\xec\xf7\xac\x78\xd9\x86\xbb\xd7\xb7\xda\xb3\xdf\xb1\x68\xc6\x02\x6f\x80\x22\xee\xf1\x2b\x2c\x94\x6f\xb4\x10\x9e\xc5\xd2\x2e\x21\x3e\x32\xd3\xf5\xad\xed\xc0\x54\xf7\xf4\xa5\x72\xa9\x07\x51\x99\xd0\x1f\x51\x18\x2e\x51\xb5\xfe\x98\xca\x68\xa6\x6e\x1b\x5c\x75\x53\xda\xc6\x57\xcb\xa5\x03\xb1\x0a\xf4\x20\xe6\x8e\xc3\xf7\xb4\xb5\x7b\x2c\xac\xde\x46\xdf\xba\x2c\x6d\x23\xdc\xbe\x64\x6c\x51\xd8\x0a\xf9\xb8\x5e\x63\x58\x2e\x71\x70\x6c\x59\x9e\xdd\x27\x9c\x13\xf9\x54\x31\x42\xa9\x98\x04\x23\xe6\x2b\x83\x88\xde\x86\x9b\x15\x83\xbb\x74\x4d\x07\x30\x75\xec\xab\x9a\xb6\xf3\x8e\xc7\x3a\xcf\xe5\x6c\xd8\xf2\x59\x9f\x35\xc0\x71\x84\x43\x08\xaf\x47\x59\xba\xb8\xa7\xac\x74\x5e\xe2\x3a\xd7\x5a\xcf\xb0\x2e\xc3\xff\xd7\x78\xf3\x7f\x4b\x79\xa1\x97\x3d\x63\xea\x5b\x63\xcf\x50\x8d\x21\x4e\x10\x15\x4e\xd2\x9a\xa9\xe1\x08\x13\xe8\xf9\x8e\xe5\x22\xf7\xf1\x92\xdf\xaf\x74\x17\x5e\x74\x0d\x5f\x60\xe3\x00\x78\x4b\x66\x86\x25\xde\xf1\x17\x8e\x77\x6f\x16\xe0\xc8\xbf\x80\x81\x0c\x74\x00\xde\x25\xa9\x0d\xf0\xa5\x38\x6e\xc5\xce\x2b\xed\xb9\x7a\x4e\x79\x7e\x51\xbd\x7b\x69\x91\x9b\x33\x75\xaf\xbd\xb9\xc4\xd4\x22\xc1\x17\x62\xad\xaa\x9b\xf3\xca\x35\xb1\x26\x78\x3e\x72\xd0\x07\x46\x1e\xfa\x54\x60\x4e\x6d\x73\xf2\x34\xb8\xa4\x04\xbf\x0b\xd7\xd3\x81\xf1\x1c\x94\xc6\x91\x34\xbd\xda\x73\x06\x8a\xd2\xa1\x61\xf4\x00\x2c\x85\x45\x9a\xb0\x38\xd9\xd0\x9f\xaa\x6f\xa5\xda\x00\x11\x4b\x17\xb8\xfd\x5c\xeb\xd3\x1b\x98\xba\x35\xf3\xf5\x19\x81\x6c\x95\x2d\x8b\xcf\xab\xc6\x13\x85\x63\xcc\x66\xd8\x57\xba\xbb\x50\xa0\xbc\x65\x80\x2a\x3b\xdb\x29\x63\xc1\x77\xaa\xfe\xfb\x66\x2f\x07\x82\xfb\x80\xe8\xd8\x2f\x1c\xfb\x06\x6f\xad\x64\xec\xa3\xf1\xb5\x63\x8f\xc9\xc4\x77\xc8\xce\xf2\x69\x5c\x3d\xff\xa5\xd4\xe4\x93\xcf\x63\xeb\x4d\x58\x1f\x5b\x74\xd0\xd7\xc8\x64\xc3\x6d\xf4\x1d\xbc\x40\x83\xc8\xee\xa8\xb5\x97\xbf\x54\x33\x1a\xaa\xbf\xe5\xe5\xb9\x6a\x40\x95\x2c\x42\x30\xc9\xd4\x83\x5f\x6d\xa3\x4b\x2b\x30\x41\xf6\x19\x0a\x94\x35\xe4\xd9\x39\x4c\xca\x98\xa1\x1d\xc6\xc4\xa5\xbc\xd5\xe8\x4f\x04\xd2\xd7\xf2\x74\xdf\xb2\x70\xe0\x0c\x85\x19\xc6\x33\xe2\x61\x74\x3c\xe2\xb1\x38\x54\xa6\xa6\x1a\x4b\x3b\x9e\x24\x26\x76\xa9\x0e\x2e\x6e\xf9\x90\x79\xd1\xa6\xeb\x4c\xae\xbe\x7c\xfd\x9f\xeb\x5d\xe6\xfb\x28\xd1\xcb\xc4\x1e\xa3\x7c\x79\x3b\x3c\x5a\xfd\x4a\xd1\xbb\x06\x11\x49\xa2\xf6\x37\x13\x1c\x6e\xe5\x0f\xad\xd5\xaf\xac\x7c\xf1\x51\xbf\xb3\xe6\xe9\x4a\xfc\x62\x15\x2e\xee\x35\x4d\x3c\x69\xd6\xbf\xb4\xd6\x33\xfc\x9f\x00\x00\x00\xff\xff\xbd\x66\xf2\xca\xd8\x15\x00\x00"

func dbMigrations20160204180633_balanceSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations20160204180633_balanceSql,
		"db/migrations/20160204180633_balance.sql",
	)
}

func dbMigrations20160204180633_balanceSql() (*asset, error) {
	bytes, err := dbMigrations20160204180633_balanceSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/20160204180633_balance.sql", size: 5592, mode: os.FileMode(420), modTime: time.Unix(1457124172, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dbMigrations20160225223636_translationSql = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x91\x4f\x6f\xe2\x30\x10\xc5\xcf\xf8\x53\xcc\x0d\xd0\x2e\x7b\x5f\x71\xf2\x26\x5e\x15\x35\x04\xc8\x9f\x03\xa7\xc8\x24\x23\x18\xe1\x38\xae\xe3\x08\xe8\xa7\xaf\x43\x54\x14\xa4\x1e\xda\xe3\xfc\xde\xbc\xb1\x9e\x1f\x5b\x2c\xe0\x57\x4d\x47\x2b\x1d\x42\x6e\xfa\x31\xdd\x45\x40\x1a\x5a\x2c\x1d\x35\x1a\xa6\xb9\x99\x02\xb5\x80\x57\x2c\x3b\x87\x15\x5c\x4e\xa8\xc1\x9d\x3c\x1a\x7c\xfd\x92\x1f\xa4\x31\x8a\xb0\x62\x2c\x48\x04\xcf\x04\xa4\xc1\x8b\x58\x73\x70\x7f\xf5\xf2\xc1\x32\xfe\x2f\x12\x3d\xfa\xe3\xac\xd4\xad\xba\x9b\xdb\x19\x9b\x50\x05\x07\x3a\xb6\x68\x49\x2a\x88\x37\x19\xc4\x79\x14\xfd\x66\x93\xd6\x59\xd2\x47\x70\x78\x75\x4f\xd8\x43\x85\x03\x0e\xc5\x7f\x9e\x47\x19\xe8\x4e\x29\x2f\x19\xd5\x59\x7f\xe3\x2b\xa9\xb4\xe8\x53\x56\x85\x74\xe0\xa8\xc6\xd6\xc9\xda\xc0\x85\xdc\xe9\x3e\xc2\x7b\xa3\x71\xfc\x48\x67\xaa\x9f\xac\x07\x9b\x38\xcd\x12\xbe\x8a\x33\x18\x87\x2b\x8c\xa5\x5a\xda\x5b\x71\xc6\x1b\x6c\x93\xd5\x9a\x27\x7b\x78\x15\x7b\x98\x51\x35\x7f\xb6\x75\x9a\xde\x3a\x2c\x86\xcc\xc5\xe8\x08\xe4\xf1\x6a\x97\x0b\x98\x0d\xd2\x9c\xcd\xfd\x97\x3e\x35\x17\x36\x17\xfd\xd9\xdd\xa3\xb8\x1e\x7e\xab\x3a\xdb\x28\xe5\xd5\x83\x2c\xcf\x8c\x85\xc9\x66\x3b\x2a\x0f\x02\x9e\x06\x3c\x14\x4b\xf6\x11\x00\x00\xff\xff\x4d\xd4\x69\xbc\x2b\x02\x00\x00"

func dbMigrations20160225223636_translationSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations20160225223636_translationSql,
		"db/migrations/20160225223636_translation.sql",
	)
}

func dbMigrations20160225223636_translationSql() (*asset, error) {
	bytes, err := dbMigrations20160225223636_translationSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/20160225223636_translation.sql", size: 555, mode: os.FileMode(420), modTime: time.Unix(1457124172, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dbMigrations20160227183304_remove_initialSql = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\xce\xb1\x4a\xc6\x30\x14\x05\xe0\x3d\x4f\x71\xf8\x97\x0e\x52\x71\xef\x14\x4d\x9d\x62\xab\x35\x79\x80\x34\x0d\xed\xc5\x98\x84\x36\xa5\x3e\xbe\x29\xa2\x20\x82\xfc\xc3\x1d\xce\xb9\xf7\xc2\xc7\xea\x1a\x37\xef\x34\xaf\x26\x3b\xe8\x74\xc6\xd7\x17\x09\x0a\xd8\x9c\xcd\x14\x03\x2a\x9d\x2a\xd0\x06\xf7\xe1\xec\x9e\xdd\x84\x63\x71\x01\x79\x29\xd5\xd7\xdf\x79\x54\x82\x49\xc9\x93\x9b\x18\xe3\x52\xb5\x03\x14\xbf\x97\x2d\x8c\xb5\xb7\x65\xe2\x1e\xf2\x06\x31\xf4\xcf\x78\xe8\xa5\x7e\xea\x70\xa1\x40\x99\x8c\xbf\x34\xec\x17\x41\xc4\x23\x7c\x23\x7e\x04\x67\x79\x95\x61\x8d\xde\x97\xed\x68\xec\xdb\x3f\x0e\x2e\xc4\x1f\x06\x46\x9a\x29\x64\x74\xbd\x42\xa7\xa5\x84\x68\x1f\xb9\x96\x0a\x77\xcd\x67\x00\x00\x00\xff\xff\xdb\x73\x39\x14\x23\x01\x00\x00"

func dbMigrations20160227183304_remove_initialSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations20160227183304_remove_initialSql,
		"db/migrations/20160227183304_remove_initial.sql",
	)
}

func dbMigrations20160227183304_remove_initialSql() (*asset, error) {
	bytes, err := dbMigrations20160227183304_remove_initialSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/20160227183304_remove_initial.sql", size: 291, mode: os.FileMode(420), modTime: time.Unix(1457124172, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dbMigrations20160229195248_acc_no_unitSql = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x56\x5f\x6f\x9b\x3e\x14\x7d\x0e\x9f\xe2\xbe\x25\xd1\xef\xd7\xa9\xef\x9b\x26\x31\x70\x5a\xd4\x94\x74\x40\xb4\x56\xd3\x64\x19\x70\x13\x2f\x04\x90\xed\xac\x7f\xa6\x7d\xf7\xd9\x0e\x10\x48\x48\x97\x4e\x9b\xb4\x87\x3c\xd8\xbe\xbe\xf7\xdc\x73\xce\x25\xb6\xce\xce\xe0\xbf\x35\x5b\x70\x22\x29\xcc\x4b\xbd\x0c\x3f\x4e\x81\xe5\x20\x68\x22\x59\x91\xc3\x70\x5e\x0e\x81\x09\xa0\x8f\x34\xd9\x48\x9a\xc2\xc3\x92\xe6\x20\x97\x6a\x6b\x7b\x4f\x07\xa9\x05\x29\xcb\x8c\xd1\xd4\xb2\xdc\x60\x76\x03\xa1\x73\x89\xae\x6d\xf0\x26\x80\x6e\xbd\x30\x0a\x81\x24\x09\x38\x76\xe8\xd8\x2e\x7a\x6b\x59\x4e\x80\xec\x08\xd5\x51\xea\x6c\xb7\x17\xd9\x1f\xa6\x48\x6f\xbd\x51\xbf\x62\x93\x4b\x31\xb2\x06\x2c\x85\x98\x2d\x04\xe5\x8c\x64\xe0\xcf\x22\xf0\xe7\xd3\xe9\xff\xd6\xa0\x78\xc8\x29\xc7\xdb\x53\x96\xcb\xf6\x91\x64\x32\xa3\xf0\x8d\xf0\x64\x49\x78\xfb\x20\xa5\x22\xe1\xac\x34\xb8\x25\x7d\x94\x6a\x2b\xe1\x54\xf5\x9f\x62\x22\x41\xb2\x35\x15\x92\xac\x4b\x78\x60\x72\x69\x96\xf0\x5c\xe4\xb4\xc9\x00\x2e\x9a\xd8\xf3\xa9\x5a\xcc\x3e\x8d\xc6\xea\xf2\xa6\x4c\x7f\xff\x32\x91\x92\xb3\x58\xf1\x2a\xe0\xab\x28\xf2\xf8\x30\x72\xf8\xfd\xc7\x50\xa3\x66\x82\xc4\x99\xa2\x3f\x2e\x8a\xec\x30\xea\x9e\x64\x82\xaa\x30\x67\xe6\x87\x51\x60\x7b\x7e\x04\x35\x7d\xb8\xe4\x6c\x4d\xf8\x13\x5e\xd1\x27\x01\x37\x81\x77\x6d\x07\x77\x70\x85\xee\x60\xc4\xd2\xb1\x65\x8d\xfb\xb8\x97\x9c\xe4\x82\x18\x07\xbc\xc4\x7f\x55\xa3\x5f\x81\x8d\x38\xa6\xcd\x6b\xf8\x7e\x25\xc3\x1a\xd4\x5a\x63\xea\x29\xdb\xa7\x7c\xc1\x39\xcd\x8c\x89\x35\xd4\xda\x2e\x8d\x4c\xdb\x8b\x2d\x56\xdb\xc4\xb4\x99\x3d\x20\x76\x4f\x0c\x83\x09\xaf\x37\x42\xe2\xbc\x90\x38\xa6\xf8\x99\xf2\x02\xd4\x00\x38\x57\x30\xaa\x20\xbf\x7b\x0f\xe7\x5d\x45\x3c\xdf\x45\xb7\xed\xa2\xb8\xa1\x3c\x4f\xe9\x23\xcc\xfc\x03\xb9\xac\xc1\x3c\xf4\xfc\x0b\x88\x25\xa7\xd4\x1a\x28\xf5\x00\x76\x3a\x59\x83\x17\xb3\x57\x9a\xe1\xfb\x82\x53\xb6\xc8\x4f\xcd\x5f\x5d\xeb\x24\xef\x35\x13\x96\x64\xa1\x0d\xd5\xde\x6a\x2c\xa2\xa7\x56\x1d\xd7\x2a\x7c\xfe\x72\x94\x7a\x93\x06\x97\xab\x2e\xeb\xdd\xa4\xbf\x22\xd2\xa4\x30\x2c\x62\x55\xbc\xa7\x53\x13\x51\x77\xab\x42\xaa\x5e\xb7\xbb\xbd\x8d\x1a\x1a\xaa\x0e\x8f\x8d\x8c\x3a\x36\xe6\xeb\xcc\x83\x51\x5f\x31\x40\x17\x74\x67\xbe\xf3\xe3\x33\x64\x3a\xb3\xa7\x11\x0a\x8e\xcc\x2c\xd8\xae\x0b\x7d\x1f\x83\xfb\x15\x4c\x66\x01\xf2\x2e\xfc\x2d\x67\x3b\x67\x8c\xad\x00\x4d\x50\x80\x7c\x07\x85\x9d\xef\xaf\xb1\x33\x5c\xdb\x91\x73\x09\x13\x5d\x5c\x51\xe5\xa2\x29\x52\xad\x07\x48\x15\xf0\x9c\x48\xb3\x37\xbf\x71\x35\x1b\xbb\x8f\xfc\x6b\xf0\xe9\x3e\x0f\xc1\x55\xdd\x77\x91\x11\x62\x78\xfe\x1b\xb0\x8c\x76\xfb\xd0\x3a\x13\xbf\x8f\x70\xdf\x72\x7b\x14\x76\x5a\x3e\x8e\xb7\x02\x77\x12\xdc\xc6\x63\xff\x10\x85\x8d\x53\x4e\x82\x54\xff\x69\xff\x59\x4c\xed\x87\x8c\xab\x4a\xd4\x4f\x99\xe6\x1d\xa3\x37\x4f\x7a\xc9\xf0\x22\x33\x7f\xb4\x24\x59\x75\x5f\x33\xfa\x9d\xf2\x33\x00\x00\xff\xff\xb3\x4a\x5c\x7c\x31\x09\x00\x00"

func dbMigrations20160229195248_acc_no_unitSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations20160229195248_acc_no_unitSql,
		"db/migrations/20160229195248_acc_no_unit.sql",
	)
}

func dbMigrations20160229195248_acc_no_unitSql() (*asset, error) {
	bytes, err := dbMigrations20160229195248_acc_no_unitSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/20160229195248_acc_no_unit.sql", size: 2353, mode: os.FileMode(420), modTime: time.Unix(1457124172, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dbMigrations20160304235607_rebuildAccSql = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x55\x5f\x6f\xda\x30\x10\x7f\xcf\xa7\xb8\x55\x95\x00\xb5\x45\xed\x33\xea\x43\x4a\x2e\x34\x53\x6a\xb7\x8e\xad\xee\x0d\xa5\xc1\xa2\xd6\x68\xa0\x89\x51\xb7\x6f\xbf\x8b\x0d\xac\x19\x94\x21\xd6\x59\x82\xf8\xcf\x9d\xef\x77\xe7\xdf\xdd\x05\x17\x17\x70\xf6\x62\xa6\x55\x6e\x35\xa8\x45\xb3\xcc\x1e\x52\x30\x25\xd4\xba\xb0\x66\x5e\x42\x47\x2d\x3a\x60\x6a\xd0\x3f\x74\xb1\xb4\x7a\x02\x6f\xcf\xba\x04\xfb\x4c\x5b\x5e\xaf\x11\xa2\x45\xbe\x58\xcc\x8c\x9e\x04\x41\x98\x4a\x14\x20\xc3\x9b\x14\x21\x2f\x8a\x3e\xfd\xe6\xcb\xd2\xd6\x10\x46\x11\x0c\x79\xaa\xee\x18\x14\xcb\xaa\xd2\xa5\x85\x27\x33\x35\xf4\x61\x5c\x02\x53\x69\x0a\x11\xc6\xa1\x4a\x25\x5c\x0e\xb6\xae\x59\xd6\xba\x1a\xdb\x7c\xba\xbe\x87\x65\x52\x84\x09\x93\xb0\x3e\x18\x2f\x4b\xf3\x0a\x8a\x25\x0f\x0a\xa1\xeb\x76\xcd\xe4\x9c\x0e\x7a\x83\xa0\xe5\x66\x66\xe9\xff\x85\xcc\xdf\x68\xb2\x1e\x04\x43\x81\xa1\x44\x88\x15\x1b\xca\x84\x33\x67\xcd\x94\xa4\x6f\xc7\xb6\xca\xcb\x3a\x77\x81\xe8\xf6\x40\xa0\x54\x82\x65\x60\x2b\x33\x9d\xea\x0a\xc2\x0c\x4e\xb7\x05\x4f\x03\xa0\x71\x83\xa3\x84\xb9\x59\x33\x92\x18\xe4\x68\xcc\xef\xe1\x1a\x3a\x09\xcb\x50\xc8\x0e\xc8\x5b\xfc\x2d\x40\x43\xdd\x47\x0d\x8c\x56\xc8\x32\x94\x70\xb2\x0a\xd6\xc9\xf5\x66\x76\xc6\xf0\xb1\x9f\xbf\x34\x32\xf0\x78\x8b\x02\xc1\x4c\xae\xdd\x9e\x57\x24\xc7\x07\x9b\xab\x91\x45\x64\x9f\x62\xb0\x0b\x8c\x37\xfa\x59\x60\x2e\x78\x1a\x7d\x0e\xae\x08\x53\xfc\x47\x5c\x9f\x07\x46\x0a\xa2\xc6\x91\x61\xba\xdc\x63\x83\x48\x29\x74\x3e\xf9\x09\x76\x0e\xc5\xbc\xb4\xa6\x5c\xea\x2f\x9b\x53\xcf\x36\x20\xc4\xfe\x0a\x52\x1f\x04\xbb\xf8\x06\x69\xc8\x46\x2a\x1c\x21\x2c\x66\x8b\x69\xfd\x3a\x1b\x6c\x38\x2d\x45\x32\x1a\x51\x1a\x6d\x6b\x11\x41\x63\x4e\x31\xf1\x6c\x04\x2e\xd6\xbe\xd0\xcc\x07\x1f\x56\xa9\xf0\x4e\xa9\x76\x40\x48\x0f\x30\x1c\xde\x82\xe0\x8f\x80\xdf\x70\xa8\x48\xf8\x5e\xf0\x21\x46\x4a\xe0\x87\xe9\x43\xa8\x0e\x4c\x35\x97\xe6\x07\xe7\x9b\x93\x3e\x36\xe9\xd6\xfe\x53\x21\xe1\x7f\x94\x99\x4d\x09\x01\x5a\x9e\x83\x7b\xdd\x5e\x4b\xb7\x19\x19\xc5\x6a\x28\xa1\xbb\xfa\xce\xdf\x4a\xa7\x04\xb1\xe0\x77\x6d\x5e\xe4\x90\x62\x2c\xe1\x2b\x4f\xb6\xe3\x0a\xd6\x45\xbb\x4f\x0c\xb5\xef\xf8\xb9\x65\xcd\xf3\xd8\x92\x1c\x39\xd5\x70\xf9\x7d\x1c\xcc\xa4\x77\xee\xa0\x5e\x79\xeb\x8a\x31\xcc\x64\xd7\x89\x91\x43\xbd\xc6\x8f\xad\x1b\xc9\x2c\xd5\xd2\x38\x4d\x08\xbc\x9f\xef\xae\xab\x11\x5f\x13\xa4\xe1\xb7\x03\x48\x10\x5a\x11\xeb\xfb\xdd\xb3\xab\xff\x4e\x79\xff\xe4\x47\xf1\xde\xbf\xed\x31\xe4\x77\x9a\xc7\x27\xc0\x8a\xd4\x1f\xf5\x22\x2c\xa9\x75\xb6\x8e\x22\xe2\xd2\xba\x1f\x6f\x9a\x71\xb3\x79\x50\x3b\xae\xe6\xb3\x19\x9d\x3e\xe5\xc5\xf7\x3d\x2d\x39\x12\x94\x1e\xed\x9e\xbc\xaf\xf3\xae\xc4\x77\x53\x64\x10\xb8\xe3\x3d\x25\x67\x47\x41\xf9\xab\x92\x37\xfc\xc1\x6b\xac\xb4\x0f\x2b\x27\x87\x09\x93\xdc\xaf\x00\x00\x00\xff\xff\x0e\xa7\xa2\x55\x14\x09\x00\x00"

func dbMigrations20160304235607_rebuildAccSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations20160304235607_rebuildAccSql,
		"db/migrations/20160304235607_rebuild-acc.sql",
	)
}

func dbMigrations20160304235607_rebuildAccSql() (*asset, error) {
	bytes, err := dbMigrations20160304235607_rebuildAccSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/20160304235607_rebuild-acc.sql", size: 2324, mode: os.FileMode(420), modTime: time.Unix(1457124172, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"db/migrations/.gitignore":                        dbMigrationsGitignore,
	"db/migrations/20160117193701_user_base.sql":      dbMigrations20160117193701_user_baseSql,
	"db/migrations/20160204180633_balance.sql":        dbMigrations20160204180633_balanceSql,
	"db/migrations/20160225223636_translation.sql":    dbMigrations20160225223636_translationSql,
	"db/migrations/20160227183304_remove_initial.sql": dbMigrations20160227183304_remove_initialSql,
	"db/migrations/20160229195248_acc_no_unit.sql":    dbMigrations20160229195248_acc_no_unitSql,
	"db/migrations/20160304235607_rebuild-acc.sql":    dbMigrations20160304235607_rebuildAccSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"db": &bintree{nil, map[string]*bintree{
		"migrations": &bintree{nil, map[string]*bintree{
			".gitignore":                        &bintree{dbMigrationsGitignore, map[string]*bintree{}},
			"20160117193701_user_base.sql":      &bintree{dbMigrations20160117193701_user_baseSql, map[string]*bintree{}},
			"20160204180633_balance.sql":        &bintree{dbMigrations20160204180633_balanceSql, map[string]*bintree{}},
			"20160225223636_translation.sql":    &bintree{dbMigrations20160225223636_translationSql, map[string]*bintree{}},
			"20160227183304_remove_initial.sql": &bintree{dbMigrations20160227183304_remove_initialSql, map[string]*bintree{}},
			"20160229195248_acc_no_unit.sql":    &bintree{dbMigrations20160229195248_acc_no_unitSql, map[string]*bintree{}},
			"20160304235607_rebuild-acc.sql":    &bintree{dbMigrations20160304235607_rebuildAccSql, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
