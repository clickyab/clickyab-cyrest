// Code generated by go-bindata.
// sources:
// db/migrations/.gitignore
// db/migrations/20160117193701_user_base.sql
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dbMigrationsGitignore = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\xe2\x52\xd4\x4b\xcf\x2c\xc9\x4c\xcf\xcb\x2f\x4a\xe5\x02\x04\x00\x00\xff\xff\x17\xeb\x9a\xa9\x0e\x00\x00\x00"

func dbMigrationsGitignoreBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrationsGitignore,
		"db/migrations/.gitignore",
	)
}

func dbMigrationsGitignore() (*asset, error) {
	bytes, err := dbMigrationsGitignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/.gitignore", size: 14, mode: os.FileMode(420), modTime: time.Unix(1481445276, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dbMigrations20160117193701_user_baseSql = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x58\xd1\x6e\xa3\x38\x14\x7d\xcf\x57\xf8\x8d\x44\x3b\x95\xd2\x1d\x75\x1e\xb6\x4f\x6c\x4a\x77\xa3\x4d\xc8\x0c\x85\xd5\xcc\x13\xe3\x80\xd3\x58\x21\x18\x19\xa7\x9d\xec\xd7\xaf\x8d\x31\x18\x63\x92\x68\xd3\x51\xb7\x8a\x2a\xc2\xbd\x3e\xb6\xcf\x3d\xe7\xe2\x30\xba\xb9\x01\xbf\xec\xf1\x33\x85\x0c\x81\xa8\x10\x5f\x9f\xbe\x2c\x00\xce\x41\x89\x12\x86\x49\x0e\x9c\xa8\x70\x00\x2e\x01\xfa\x81\x92\x03\x43\x29\x78\xdd\xa2\x1c\xb0\x2d\xbf\x25\xc7\x89\x24\xfe\x05\x16\x45\x86\x51\x3a\x1a\xcd\x02\xcf\x0d\x3d\x10\xba\xbf\x2f\x3c\x70\x28\x11\x2d\x47\xe3\x11\xe0\x7f\x38\x05\x73\x3f\x1c\xdf\xde\x4e\xc0\xe7\x60\xbe\x74\x83\x6f\xe0\x2f\xef\x1b\xf0\x57\x21\xf0\xa3\xc5\x02\xb8\x51\xb8\x8a\xe7\x3e\x1f\xbf\xf4\xfc\xf0\x43\x35\x06\xed\x21\xce\xc0\xdf\x6e\x30\xfb\xd3\x0d\xc6\x77\xd3\x49\x9b\x1e\xf9\xf3\x2f\x91\x07\x64\x5e\x01\xcb\xf2\x95\xd0\xb4\x49\xfd\x34\x9d\x34\x99\x32\x85\x64\x69\xdc\x4b\xfb\x38\x9d\xc8\x28\x4c\x12\x54\x96\x31\x23\x3b\xbe\x3b\x2d\x0a\x0c\x14\xb1\xa1\x98\x1d\x0b\x04\x3c\x3f\x5a\x8e\x9d\x82\xef\x8f\xe4\x30\x73\x3e\x00\x27\x21\xb4\x20\x92\x11\x67\xa2\xd6\x45\x51\xce\xe2\x76\xeb\xf5\x6c\x2f\x90\x41\xda\xcc\x73\xfb\x49\x2d\xa3\x64\x90\x1d\xca\x1a\x9b\xa2\x67\x5c\x32\x44\x51\x2a\xd0\x5f\x10\xc5\x1b\x2c\xaf\xd7\x19\x49\x76\xfc\xb2\xb7\xbc\x84\x22\x5e\xc9\x34\x86\x0c\x84\xf3\xa5\xf7\x14\xba\xcb\xcf\xe0\xc1\x7b\x74\xa3\x45\x08\x66\x51\x10\x70\x66\xe3\x36\xa2\x46\xd7\x7b\x2b\xd2\xe1\xc1\xce\x94\xff\xdd\x54\x1f\x30\x9d\xfe\x56\x7d\x1c\x03\x60\xb6\xf2\x9f\xc2\xc0\xe5\x5b\x95\x3c\x61\xc1\x78\x4d\x40\xbc\xd9\x81\xc7\x55\xe0\xcd\xff\xf0\xab\xb2\x8f\x9b\xc8\x04\x04\xde\xa3\xc7\x57\x36\xf3\x9e\xa4\x60\xc0\x98\xdf\x1d\x4d\xee\x1b\x31\xcd\xfd\x07\xef\xab\x8c\xc5\xf2\xbf\x04\x5c\xf9\x6a\x40\x8b\xc6\x47\x19\x22\xa4\x24\x43\xd7\x88\x30\x87\x7b\xd4\xd4\xea\xd7\xbb\xbb\xc9\xfb\x72\x2d\x88\xa9\xf7\x57\x7b\x40\xd2\x23\xb6\x29\x78\x39\xe0\x3c\x45\x3f\x04\x37\xd5\xc6\x2b\x32\xef\x6d\x9c\xc4\x5c\xbc\x7b\x5c\x96\x5c\xaf\x57\xb0\x53\x4f\xdb\x0c\xec\xee\xb3\x9d\xc2\xc2\x60\x99\x90\xc6\x48\xcf\x19\x59\x4b\x1b\xc9\x52\x8a\xab\x12\x65\x1b\xe7\x9d\xd9\xee\x29\xdb\x60\x2e\xae\x48\xb6\x09\xbc\x26\xa6\x23\xef\xb6\x22\x27\xab\xa8\xc1\xf7\x0a\xaa\x05\xeb\xd2\x76\x4c\x62\x5b\x5e\xeb\x96\x1e\x80\x5a\xe4\xbd\xa5\x71\x73\xba\x18\xc5\x6b\xde\xf5\xaf\x71\x4f\xdd\x09\xba\x0d\xf0\xfb\x0e\x1d\xbf\xb7\xfd\x6f\xaa\xfa\xdf\x0b\xcc\x0e\xc8\x72\xdf\xec\x2c\xed\xca\x3a\xfd\xa0\xc3\x7f\x3d\xf1\x89\xf6\x62\xe3\xdf\x84\xef\xf0\x6f\x04\x6d\xfc\x9f\x5a\x9e\x0d\x41\xad\xd2\x5a\x80\x0d\xce\x61\x9e\x60\x98\xbd\x1d\xff\x86\xb0\xd7\x30\xdf\xc5\x03\x0d\x8e\x3f\x13\xc9\x81\x37\xd5\x2d\x7f\x74\x22\x6a\xeb\x80\x90\xa6\x71\x7e\xd8\xaf\xbb\x51\x73\x7c\x3f\x43\xf9\x7f\x8b\xd6\x70\x38\xfc\xbf\xb1\x7c\xb7\x16\x3f\x45\x71\x2d\x7a\x5f\x70\x4d\x6c\x50\x6f\xdd\xb5\x19\x6a\xd3\x86\x9f\x14\x5b\x41\xc9\x06\xf3\x6e\xa0\x1d\x63\x6a\xd9\x9d\x96\x10\xc3\x2c\xeb\xca\xc7\x48\x40\x09\xc9\xc9\x1e\x27\x1c\x39\xd5\x12\x95\xb7\xd5\x31\xa7\x17\x36\x1f\x25\x5b\x92\x6b\xbd\xe1\xa3\x52\x59\x9a\x52\x7e\x74\xb3\xe9\x47\xa8\x8f\x1e\x7b\xcd\x87\x6f\xf4\x05\xe7\x09\xea\x05\x12\xcc\xfa\xd9\x9a\x0a\x1f\x38\x63\x42\x4c\xba\xc2\xfa\xf7\x4d\xe1\x58\x78\x7d\x03\x09\xc9\xea\xeb\x98\xcd\x3c\x72\x17\xba\x04\x2c\x4b\x00\xe3\x3a\xef\x22\xc8\x86\xc9\xf3\xa8\x4d\xea\x25\xc0\x5a\x29\xce\x22\x6b\xb9\x03\x4e\xb2\xcd\xa0\x0c\x61\x78\xca\x3a\xc3\x45\xf6\x50\x27\xfe\x8b\xbc\xb1\xc1\xb4\x64\x43\xfd\x35\x83\xc3\xb1\x35\xa6\x6c\x9b\xc2\xa3\xa1\xad\x67\x94\x8b\x56\x2c\x8f\x4c\x7b\x98\x21\x71\x4c\xda\xa0\xea\x4a\xe9\x15\x65\x59\xd7\x2a\x2d\xea\xd0\x7d\xe5\xa1\xd0\xfb\x5a\x3f\x35\xfe\xc1\x85\xe1\xc7\x26\x39\xaf\xd8\xe2\xbd\xa6\x13\xbf\x9d\xfe\x6c\xd7\x0d\x37\xf8\x81\x8c\x21\x23\xaa\x0a\xbe\x99\x0b\x1b\xc0\x0b\x2c\xa8\x72\x07\xfd\xd7\x07\x3b\x69\x3e\x0d\x6f\xd0\x79\x3d\xc8\x33\xb6\x6b\x31\xcf\x7b\xae\x87\x7d\xc6\x70\x2d\xb6\xe6\x36\x8b\xdd\xc4\xc1\x74\xc0\x62\xed\x53\xdc\x7c\x66\x9b\xbf\x45\x86\x33\xaf\x3a\x5b\x98\xc2\xaa\xa6\xfd\x8f\x62\x3a\x81\x78\xfd\x2f\x0b\xed\x88\xd0\x20\x1a\x35\x17\xb7\xf4\x9f\x01\x03\x23\x6d\xc7\x58\x39\x54\x2f\xa3\xfe\x36\xe9\x81\xbc\xe6\xea\x7d\x52\xf3\x32\x49\xdc\xbc\xe8\x75\x12\xc7\xce\x78\x74\x0d\x93\xdd\xe8\xdf\x00\x00\x00\xff\xff\x89\x12\x9e\x19\xa5\x12\x00\x00"

func dbMigrations20160117193701_user_baseSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations20160117193701_user_baseSql,
		"db/migrations/20160117193701_user_base.sql",
	)
}

func dbMigrations20160117193701_user_baseSql() (*asset, error) {
	bytes, err := dbMigrations20160117193701_user_baseSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/20160117193701_user_base.sql", size: 4773, mode: os.FileMode(420), modTime: time.Unix(1481545198, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"db/migrations/.gitignore": dbMigrationsGitignore,
	"db/migrations/20160117193701_user_base.sql": dbMigrations20160117193701_user_baseSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"db": &bintree{nil, map[string]*bintree{
		"migrations": &bintree{nil, map[string]*bintree{
			".gitignore": &bintree{dbMigrationsGitignore, map[string]*bintree{}},
			"20160117193701_user_base.sql": &bintree{dbMigrations20160117193701_user_baseSql, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

