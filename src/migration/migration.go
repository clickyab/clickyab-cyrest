// Code generated by go-bindata.
// sources:
// db/migrations/.gitignore
// db/migrations/20161112140718_new_schema.sql
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dbMigrationsGitignore = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\xe2\x52\xd4\x4b\xcf\x2c\xc9\x4c\xcf\xcb\x2f\x4a\xe5\x02\x04\x00\x00\xff\xff\x17\xeb\x9a\xa9\x0e\x00\x00\x00"

func dbMigrationsGitignoreBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrationsGitignore,
		"db/migrations/.gitignore",
	)
}

func dbMigrationsGitignore() (*asset, error) {
	bytes, err := dbMigrationsGitignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/.gitignore", size: 14, mode: os.FileMode(420), modTime: time.Unix(1473232308, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dbMigrations20161112140718_new_schemaSql = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x58\xcd\x6e\xe3\x36\x10\xbe\xfb\x29\x78\x93\x83\x6e\x00\x27\xe8\xf6\xd0\x9e\xdc\x44\x8b\x1a\xb5\x9d\xac\x57\x2a\x76\x4f\x5a\x8a\xa2\x6d\xc2\x12\x29\x90\x54\x12\xf7\xe9\x3b\xd4\xbf\x25\xd2\x36\x90\x16\x5d\xc3\x07\x69\x66\xf8\x89\xf3\xcd\x8f\x86\x9a\xdc\xde\xa2\x9f\x32\xb6\x93\x58\x53\x14\xe6\xe6\xf6\xcb\xe7\x25\x62\x1c\x29\x4a\x34\x13\x1c\x79\x61\xee\x21\xa6\x10\x7d\xa3\xa4\xd0\x34\x41\xaf\x7b\xca\x91\xde\x83\xa8\x5a\x67\x8c\xe0\x06\xe7\x79\xca\x68\x32\x99\x3c\x6c\xfc\x79\xe0\xa3\x60\xfe\xfb\xd2\x47\x52\xa4\x34\xca\xa9\xcc\x98\x52\x60\x38\x99\x4e\x10\xfc\x58\x82\x16\xeb\x60\x7a\x77\x77\x83\x9e\x37\x8b\xd5\x7c\xf3\x0d\xfd\xe9\x7f\x43\xeb\xa7\x00\xad\xc3\xe5\x12\xcd\xc3\xe0\x29\x5a\xac\x01\x69\xe5\xaf\x83\x0f\xe5\x9a\x12\xa9\xb7\xb0\x31\xae\xb4\xdd\x23\xd0\x5f\xf3\xcd\xc3\x1f\xf3\xcd\xf4\xfe\xe3\xc7\x9b\x4a\xa9\x88\xc8\x29\xf2\xd7\xe1\x6a\xea\xed\x52\x11\xe3\xd4\xfb\x80\xbc\x1c\x4b\xca\xb5\xb9\x12\xaf\xdc\xab\x4d\x89\xa4\xc0\x44\x12\x61\x8d\x82\xc5\xca\xff\x12\xcc\x57\xcf\xe8\xd1\xff\x34\x0f\x97\x01\x7a\x08\x37\x1b\xd8\x4f\xd4\x69\x4e\x37\x51\xe4\x89\x7b\xb1\x37\x83\xdf\x6d\xf9\x47\xb3\xd9\xaf\xe5\xdf\x6b\x01\x26\x37\xbf\x35\xc4\x85\xeb\xc5\xe7\xd0\x07\x3f\x1f\xfd\xaf\x43\xfe\x80\x80\xa8\x60\x3c\xa1\x6f\xe8\x69\x3d\x54\xa2\x29\x4b\x3a\x18\xfb\xfa\x9a\xc5\x68\x7b\xb0\x02\xd4\xea\x0e\xa5\x8b\xa2\x7a\x47\xec\x38\xce\xa8\x25\x2e\x3f\x24\xd9\x23\x86\x55\xcd\xeb\x29\x25\x85\xa2\x12\x9e\xad\x25\x8b\xa1\x2a\xde\x43\x4e\x89\xd4\x2d\xac\x84\xdf\x0f\xf4\xf8\xbd\xa5\xec\x6e\x36\x6b\xe4\x2f\x38\x2d\xe8\xa9\xc6\xe5\xce\x60\x8b\xa7\x9e\x0d\x94\xb6\xdc\x19\xae\x37\xf7\xaa\x4b\x9e\x11\x42\xed\xc8\x30\x79\x4a\x31\x91\x59\x4d\xd1\xc0\xdd\x41\x54\x85\x64\x3b\xc6\xa1\xa9\xf0\x5d\x94\x52\x9c\xd8\xb2\xa6\x50\x5a\x64\x06\x53\x24\xb4\x82\xb9\xaf\x55\x3b\xd6\x2d\xf8\xe5\xe7\x5a\x68\x60\x22\xa5\xb1\x2e\x54\x65\x0d\xf2\xc9\x44\x1a\x69\x7c\x34\x1b\x2b\xa5\xf7\xe7\x69\x04\xb3\xa8\xde\xf9\x90\x44\x83\x70\xd6\xf7\x2d\x38\xc4\x09\xc3\xe9\xbf\x97\x24\x03\xd6\x62\xcc\x0f\x91\xa3\xc8\x30\x21\xa2\xe0\x3a\xda\x8b\x34\xa1\xd2\xc6\x27\x96\x49\xc4\x8b\x2c\x3e\xd5\x0e\xd7\x8f\x2d\x9a\xee\xba\xa7\x31\x76\xab\x6d\x45\xee\xae\xe0\xb3\x41\x68\x89\xb4\x44\xa1\xd5\x39\x33\xb9\x5b\xdd\x04\xb2\x97\xc7\xbd\xe5\xe7\x42\x99\x4b\xb1\x65\xd0\x24\x88\x90\xb9\xa8\xde\x7d\x57\xa5\xb5\x66\x3a\xb5\x05\x87\x12\xc1\x45\xc6\x48\x2f\x97\x9b\x0e\x20\xe9\x8e\x29\x7d\x92\xe6\x8d\x2a\xdf\x0b\x3e\x10\xe1\x24\x91\x54\x29\x1b\xff\x26\x7a\xf2\x38\xea\x30\xe0\xca\x0b\xe3\x84\x8e\x14\x84\xe9\xb1\x75\x2f\x8a\x8f\xc0\x89\x89\x57\x3f\x88\x7d\xf9\x64\xc8\x7e\x8f\xac\x8e\xc0\xea\x21\xfd\x10\x58\xb8\x45\xd3\xda\xee\x2a\xc8\xd6\xd1\xcb\xa8\xad\xe9\x35\xc0\x3d\xa6\x2e\x22\xf7\x6c\x1d\x99\x6c\x7b\x82\xa3\xb3\x58\x9f\x70\x4d\x7a\xc2\x2b\x5d\x09\xde\x36\x9c\xf3\xb9\xb9\x65\x52\x69\x57\xf7\x48\xb1\x5b\x17\x33\xa9\xf7\x09\x3e\x0e\x32\x62\x47\xb9\x69\x34\xd5\xb8\xb5\xc2\x29\x35\x23\xd6\x27\x9a\x99\xab\x26\x9b\x68\x9a\x56\x49\x3c\x46\x75\xc9\x9b\x0c\x0f\xfc\xaf\x75\x4f\xfc\x9b\xe5\x55\x71\x8c\x8d\x79\x49\x16\x94\xfa\x89\xfe\x6e\xf6\x5f\xd7\x84\x7b\x46\x19\x59\x8c\xca\xa4\x09\xda\x35\x35\xd2\xd8\x3a\x0b\x64\x0c\x76\xb6\x3a\x7a\x78\xce\xd2\x18\x41\x5e\xa8\x8b\x0e\xf3\x72\x51\x8c\xb0\x2f\x54\x44\x87\x7d\xae\x1c\xcc\xf4\xe6\x28\x81\x6e\x50\xf4\x06\x31\x1b\x9e\x33\xdc\x96\xb6\x37\xdb\x28\xaa\xed\x46\x06\xa3\x77\x2b\x77\x0e\xdd\xe5\xb8\xf5\x8e\x91\x01\x2a\x8e\xa5\xb6\x02\xc3\x4a\xbd\x0a\x69\x1b\xad\x60\x44\x88\xac\xea\x96\x85\xf2\x69\xed\x60\x00\xf5\x18\x69\x71\xa0\xd6\x43\x97\x28\x24\x69\x4e\x5d\x30\x23\x99\x2e\x40\x52\x46\x0e\x47\x1c\x37\x7d\xa0\x24\x41\x1f\xdb\xc3\x59\x13\xd6\xd2\xb6\x6b\x7a\x5e\xbb\x73\x73\x62\x1b\xd5\x21\x7e\xc1\x1a\x5b\x27\x93\x6a\xe8\xab\xb0\x9b\xf7\x29\x4d\x0c\xfa\x0b\x95\x6c\xcb\xaa\xeb\x38\x15\xe4\x00\x97\xff\xf3\xa9\x04\x41\x77\x0f\x9f\x4d\x9f\x80\x11\x57\x96\x9e\x6a\x96\x51\x70\x22\xcb\xad\x69\x65\x9d\xc8\x61\x0e\x6f\x69\x3a\x37\x4b\x8d\x6a\xab\x3d\xe6\x9c\x7c\x12\x78\x84\xb3\x71\xf3\x51\xa0\xfd\x22\x60\x84\x57\x7d\x13\x80\xcc\x4e\x41\x1b\x63\x72\x00\xdc\x7f\x02\x00\x00\xff\xff\x3e\xe8\xe3\x43\x6c\x10\x00\x00"

func dbMigrations20161112140718_new_schemaSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations20161112140718_new_schemaSql,
		"db/migrations/20161112140718_new_schema.sql",
	)
}

func dbMigrations20161112140718_new_schemaSql() (*asset, error) {
	bytes, err := dbMigrations20161112140718_new_schemaSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/20161112140718_new_schema.sql", size: 4204, mode: os.FileMode(420), modTime: time.Unix(1480941246, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"db/migrations/.gitignore": dbMigrationsGitignore,
	"db/migrations/20161112140718_new_schema.sql": dbMigrations20161112140718_new_schemaSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"db": &bintree{nil, map[string]*bintree{
		"migrations": &bintree{nil, map[string]*bintree{
			".gitignore": &bintree{dbMigrationsGitignore, map[string]*bintree{}},
			"20161112140718_new_schema.sql": &bintree{dbMigrations20161112140718_new_schemaSql, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

