// Code generated by go-bindata.
// sources:
// db/migrations/.gitignore
// db/migrations/20160117193701_user_base.sql
// db/migrations/20160225223636_translation.sql
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dbMigrationsGitignore = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\xe2\x52\xd4\x4b\xcf\x2c\xc9\x4c\xcf\xcb\x2f\x4a\xe5\x02\x04\x00\x00\xff\xff\x17\xeb\x9a\xa9\x0e\x00\x00\x00"

func dbMigrationsGitignoreBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrationsGitignore,
		"db/migrations/.gitignore",
	)
}

func dbMigrationsGitignore() (*asset, error) {
	bytes, err := dbMigrationsGitignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/.gitignore", size: 14, mode: os.FileMode(420), modTime: time.Unix(1470570111, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dbMigrations20160117193701_user_baseSql = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x57\x6f\x6f\xe2\xc6\x13\x7e\xef\x4f\x31\x8a\x22\x19\xf4\xe3\x22\x4c\xee\x2e\x89\x7e\xaa\x54\x1f\x36\x09\x3d\x62\x88\x0d\x4d\xd2\xaa\xb2\x16\x76\x43\xb6\x01\xaf\xcf\xbb\x84\x90\xaa\xdf\xbd\xb3\xc6\x06\x03\xe6\xc2\x55\x3d\x55\x7d\x65\xef\x9f\x99\x7d\xf6\x99\x79\xc6\x63\xe3\xdd\x3b\xf8\xdf\x94\x8f\x13\xa2\x18\x0c\x62\x3d\x0c\x6e\x3a\xc0\x23\x90\x6c\xa4\xb8\x88\xc0\x1c\xc4\x26\x70\x09\xec\x85\x8d\x66\x8a\x51\x98\x3f\xb2\x08\xd4\x23\x4e\x2d\xed\xf4\x26\x1c\x90\x38\x9e\x70\x46\x0d\xa3\xe9\xbb\x76\xdf\x85\xa0\x79\xe5\x5e\xdb\x40\x08\xf9\xff\x7a\xce\xbd\x19\xb8\x5e\xd3\xd5\xb3\x27\x24\x12\x51\x38\x93\x2c\x81\xa0\x6f\xfb\x7d\xb0\xea\x75\x6b\xbd\xb5\x7f\xdf\x5b\x6e\xd3\x3b\x42\xa9\x88\x9a\x49\xb0\x03\xc3\xf5\x06\xd7\x50\x31\x13\x36\xe6\x52\xb1\x84\x51\xb3\x66\x3e\xb3\x84\x3f\xf0\xf4\x75\x48\xa2\x08\x5f\xaa\x05\x47\xf6\xa7\xce\xd2\x53\x22\x26\x4c\x56\x0c\x00\x4e\x61\xc8\xc7\xe8\x97\x93\x09\x78\xdd\x3e\x78\x83\x4e\xa7\x86\x0b\x11\x99\x32\x78\x26\xc9\xe8\x91\x24\x1b\x0b\x94\xc9\x51\xc2\xe3\xf4\xae\x3f\xdb\x7e\xf3\xca\xf6\xf5\x74\xc2\xa4\x98\x25\x23\x26\xf3\xc9\x5f\x7f\xd3\xd3\xa3\x84\x21\x9d\x34\x24\x0a\x14\x9f\x32\x04\x3f\x8d\x61\xce\xd5\x63\x3a\x84\x57\x11\x31\x70\xdc\x96\x3d\xe8\xe0\x09\xdd\xdb\x4a\x55\x1b\xcd\x62\xfa\xed\x46\xcd\xae\x17\xf4\x7d\xbb\xed\xf5\x21\xbd\x5d\xa8\xc8\x70\xc2\xc2\x38\xe1\x53\x92\x2c\xa0\xe7\xb7\xaf\x6d\xff\x1e\x3e\xbb\xf7\x50\xe1\xb4\x6a\x94\xf2\xa2\x19\xfe\x3a\x2f\x7a\xc7\x5e\x6e\x62\x22\xe5\x5c\x24\xb4\x74\x71\x24\x22\x45\x46\xaa\x74\x4d\x89\x27\xcc\xa4\x52\xab\x03\x08\xcc\xf7\xff\x3d\x26\xf7\x5b\x4f\x88\x54\xe1\x44\x8c\x51\x02\x6f\xc7\x21\xc3\x9b\xa5\xe7\x76\xba\xee\x1c\xb2\x91\xb6\x68\x47\x94\x4a\xf8\x10\x55\x25\xe1\x77\x29\xa2\x61\x89\xc5\x1f\x7f\x9a\x5b\x81\x4e\xc3\x15\x72\xba\x37\xca\x25\xfb\x43\x1d\xbd\x70\x16\xf1\x2f\x33\x94\xb9\xd7\x46\x19\x42\x25\x8f\x6a\x99\x81\x0c\xb3\xc8\x6d\x1b\x65\xd3\x55\x63\x7f\x2e\x85\x2b\xa1\xa5\xa3\x65\x56\xf1\x48\xa5\x8a\xc1\xa5\xcd\x99\x6d\xa4\xe9\x8e\xf8\x69\xf3\x56\x99\xa3\x5a\x66\xbe\x27\x91\x51\x8e\x2c\x79\xc6\xc8\xbf\x9d\xd1\xff\xbd\xbc\x2c\x4a\x3d\xbf\x67\x76\x0b\x99\xa7\x82\x66\xf6\x8d\x6c\x28\xd8\xd2\x55\xa1\x08\x9f\xd8\xe2\xd0\x08\x23\x70\x49\xc6\x4c\x4b\xe4\xeb\x14\x0f\x05\x5d\x80\x62\x2f\xea\x60\xe2\xa7\x8c\x72\x12\xaa\x45\x5c\x5e\x68\xfe\x4d\xf6\x77\x33\xb9\xc0\x69\x81\x92\x0d\x46\x77\xca\x6f\x91\xd1\xb6\xe7\xb8\x77\x99\xd6\x72\x25\x86\x3c\xa2\xec\x05\xba\xde\xba\x2e\xe3\x49\x83\xa0\xed\x5d\xc2\x50\x25\x8c\xe1\x48\x73\xbe\xae\xc8\x38\xd8\xe3\x33\xcd\xe2\xc3\x1d\xa6\xdb\xcb\xbc\xa5\x92\xdb\x05\x97\x6a\x7c\x8f\xaf\x02\x30\xbb\xd3\x77\xfd\xd2\xfa\x00\xb6\xe3\xec\x56\x9d\x87\x27\x68\x75\x7d\xb7\x7d\xe9\x6d\x08\xbf\x6a\xf8\x6e\xcb\xf5\x75\xef\x10\xac\xaf\x92\x92\x0a\xd7\x76\xbf\x79\x05\x2d\x0c\x9b\x81\xd8\x1c\xb7\xe3\x22\xf6\xa6\x1d\x34\x6d\xc7\xd5\x68\x07\x3d\xc7\x5e\xcf\x7c\x13\xa6\xe5\x37\x75\x1b\xd3\xaa\x08\x6d\x61\x5a\xba\xf8\x67\x30\x15\x55\xf6\x7d\x99\x0a\xdc\x2c\xe7\xcb\x60\xb5\xbd\xc0\xc5\xd6\x0c\x4f\xed\x16\xaf\xa8\x03\x5c\x2b\x36\x45\xb5\x75\x2b\x54\x2b\xe8\xb4\x56\x50\x5d\x15\x7b\xa4\xce\x00\x41\x55\x4c\x0d\xc9\xac\x81\x49\xd9\x03\x99\x4d\x54\x4a\x73\xda\x72\x2e\xf0\xdb\x38\xd5\x2b\xfa\xab\x07\x66\x24\xe6\xf9\x03\x73\xe9\xfb\x60\x49\x84\x50\xfa\x10\xfd\x84\x71\x22\x66\xf1\x16\x92\xb1\xa0\x25\x60\xb0\x4f\xee\xe5\x7d\x0f\x36\xbf\x43\xae\x88\xd5\x38\xdd\xc1\x98\x91\x7f\x94\xcb\xf5\xa8\x06\x47\x79\xbf\xa4\xdf\xb3\x6a\x88\xaf\x70\x94\x2a\xf0\xa8\x00\x8d\xd0\x29\x8f\xf4\x99\xc7\x0d\x72\x6c\xd5\x8f\x3f\xde\xb2\x4f\xdd\xdb\x9b\xa8\xd1\x9c\xdf\xbf\x0a\xc9\x7b\x9f\xeb\x9c\x9f\x7c\xbc\xe3\xb7\x56\xa2\xea\x8f\xbf\x38\xa7\xfc\xce\x91\x64\x11\x5c\x8a\x13\xbf\x23\x7e\x1a\xb4\xe6\xf4\x0b\xf6\xc4\xa9\x9f\x1f\xc9\xeb\x54\x88\x88\x9c\x8c\x84\xbe\x17\x98\x8d\x0f\x16\xb1\xea\xd6\xc5\x83\x75\x7a\x56\x3f\x7b\x7f\x36\xac\xd7\x2f\x4e\xe9\x07\x76\x71\x66\x35\xac\xc6\x7b\x4a\xce\xcf\xeb\x8d\xf3\x87\x8b\xec\xb6\x36\xa5\x40\x26\x93\xa5\x24\xb0\x5a\x40\xea\x35\xcd\xc5\xd2\x5b\x67\x82\x5a\x7d\xb9\xf3\x2f\x7f\x15\x13\xae\xe3\x36\xfb\x50\xc9\x9e\x58\x54\x5b\x7e\xf7\xba\x40\xd7\xed\x15\xe6\xef\xaa\xc2\xfd\x90\xf1\x50\x5d\xd5\xe0\xa5\x2f\x79\x82\xaf\x79\x3b\xb1\xf2\x90\xae\x60\xe2\x16\x7f\x6b\x1c\x31\x8f\xf2\x1f\x9b\xd5\x5f\x8d\x9e\x3c\xe8\xbf\x06\x3d\x4e\x70\x75\x48\x46\x4f\x86\xe1\xf8\xdd\x5e\xe1\xcf\x66\xad\x94\xbf\x02\x00\x00\xff\xff\x6d\x84\xac\x88\x48\x0d\x00\x00"

func dbMigrations20160117193701_user_baseSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations20160117193701_user_baseSql,
		"db/migrations/20160117193701_user_base.sql",
	)
}

func dbMigrations20160117193701_user_baseSql() (*asset, error) {
	bytes, err := dbMigrations20160117193701_user_baseSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/20160117193701_user_base.sql", size: 3400, mode: os.FileMode(420), modTime: time.Unix(1472882770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dbMigrations20160225223636_translationSql = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x91\x4f\x6f\xe2\x30\x10\xc5\xcf\xf8\x53\xcc\x0d\xd0\x2e\x7b\x5f\x71\xf2\x26\x5e\x15\x35\x04\xc8\x9f\x03\xa7\xc8\x24\x23\x18\xe1\x38\xae\xe3\x08\xe8\xa7\xaf\x43\x54\x14\xa4\x1e\xda\xe3\xfc\xde\xbc\xb1\x9e\x1f\x5b\x2c\xe0\x57\x4d\x47\x2b\x1d\x42\x6e\xfa\x31\xdd\x45\x40\x1a\x5a\x2c\x1d\x35\x1a\xa6\xb9\x99\x02\xb5\x80\x57\x2c\x3b\x87\x15\x5c\x4e\xa8\xc1\x9d\x3c\x1a\x7c\xfd\x92\x1f\xa4\x31\x8a\xb0\x62\x2c\x48\x04\xcf\x04\xa4\xc1\x8b\x58\x73\x70\x7f\xf5\xf2\xc1\x32\xfe\x2f\x12\x3d\xfa\xe3\xac\xd4\xad\xba\x9b\xdb\x19\x9b\x50\x05\x07\x3a\xb6\x68\x49\x2a\x88\x37\x19\xc4\x79\x14\xfd\x66\x93\xd6\x59\xd2\x47\x70\x78\x75\x4f\xd8\x43\x85\x03\x0e\xc5\x7f\x9e\x47\x19\xe8\x4e\x29\x2f\x19\xd5\x59\x7f\xe3\x2b\xa9\xb4\xe8\x53\x56\x85\x74\xe0\xa8\xc6\xd6\xc9\xda\xc0\x85\xdc\xe9\x3e\xc2\x7b\xa3\x71\xfc\x48\x67\xaa\x9f\xac\x07\x9b\x38\xcd\x12\xbe\x8a\x33\x18\x87\x2b\x8c\xa5\x5a\xda\x5b\x71\xc6\x1b\x6c\x93\xd5\x9a\x27\x7b\x78\x15\x7b\x98\x51\x35\x7f\xb6\x75\x9a\xde\x3a\x2c\x86\xcc\xc5\xe8\x08\xe4\xf1\x6a\x97\x0b\x98\x0d\xd2\x9c\xcd\xfd\x97\x3e\x35\x17\x36\x17\xfd\xd9\xdd\xa3\xb8\x1e\x7e\xab\x3a\xdb\x28\xe5\xd5\x83\x2c\xcf\x8c\x85\xc9\x66\x3b\x2a\x0f\x02\x9e\x06\x3c\x14\x4b\xf6\x11\x00\x00\xff\xff\x4d\xd4\x69\xbc\x2b\x02\x00\x00"

func dbMigrations20160225223636_translationSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations20160225223636_translationSql,
		"db/migrations/20160225223636_translation.sql",
	)
}

func dbMigrations20160225223636_translationSql() (*asset, error) {
	bytes, err := dbMigrations20160225223636_translationSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/20160225223636_translation.sql", size: 555, mode: os.FileMode(420), modTime: time.Unix(1472882770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"db/migrations/.gitignore": dbMigrationsGitignore,
	"db/migrations/20160117193701_user_base.sql": dbMigrations20160117193701_user_baseSql,
	"db/migrations/20160225223636_translation.sql": dbMigrations20160225223636_translationSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"db": &bintree{nil, map[string]*bintree{
		"migrations": &bintree{nil, map[string]*bintree{
			".gitignore": &bintree{dbMigrationsGitignore, map[string]*bintree{}},
			"20160117193701_user_base.sql": &bintree{dbMigrations20160117193701_user_baseSql, map[string]*bintree{}},
			"20160225223636_translation.sql": &bintree{dbMigrations20160225223636_translationSql, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

