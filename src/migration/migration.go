// Code generated by go-bindata.
// sources:
// db/migrations/.gitignore
// db/migrations/20160117193701_user_base.sql
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dbMigrationsGitignore = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\xe2\x52\xd4\x4b\xcf\x2c\xc9\x4c\xcf\xcb\x2f\x4a\xe5\x02\x04\x00\x00\xff\xff\x17\xeb\x9a\xa9\x0e\x00\x00\x00"

func dbMigrationsGitignoreBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrationsGitignore,
		"db/migrations/.gitignore",
	)
}

func dbMigrationsGitignore() (*asset, error) {
	bytes, err := dbMigrationsGitignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/.gitignore", size: 14, mode: os.FileMode(420), modTime: time.Unix(1474802204, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dbMigrations20160117193701_user_baseSql = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x58\x51\x73\xe2\x36\x10\x7e\xe7\x57\xe8\x0d\x32\xbd\xcc\x90\xb4\xd7\x87\xde\x13\x25\x4e\xcb\x14\xcc\x9d\x63\x3a\x77\x4f\x3e\x59\x16\xa0\xc1\x58\x1e\x59\x24\x47\x7f\x7d\x25\x5b\xb6\x65\x59\x02\xa6\x24\x93\x66\x32\x19\x47\xbb\xfb\x59\xfa\x76\xbf\x95\xe4\xc1\xed\x2d\xf8\x69\x4f\x36\x0c\x72\x0c\x56\xb9\xfc\xf7\xe9\xcb\x1c\x90\x0c\x14\x18\x71\x42\x33\x30\x5c\xe5\x43\x40\x0a\x80\x7f\x60\x74\xe0\x38\x01\x2f\x5b\x9c\x01\xbe\x15\x43\x55\x9c\x74\x12\xff\xc0\x3c\x4f\x09\x4e\x06\x83\x69\xe0\x4d\x42\x0f\x84\x93\xdf\xe7\x1e\x38\x14\x98\x15\x83\xd1\x00\x88\x1f\x92\x80\x99\x1f\x8e\xee\xee\x6e\xc0\xe7\x60\xb6\x98\x04\xdf\xc0\x5f\xde\x37\xe0\x2f\x43\xe0\xaf\xe6\x73\x30\x59\x85\xcb\x68\xe6\x8b\xf8\x85\xe7\x87\x1f\xca\x18\xbc\x87\x24\x05\x7f\x4f\x82\xe9\x9f\x93\x60\x74\xff\xf1\xe3\x4d\x35\x9e\xc3\xa2\x78\xa1\x2c\xb1\x98\x68\x9a\x44\x27\xcc\x10\x21\x5c\x14\x11\xa7\x3b\xb1\x8c\xbe\xb9\xa0\x07\x86\x30\xf0\xfc\xd5\x62\x34\x44\x6c\x3f\xfc\x00\x86\x28\x25\x68\x77\x84\xf1\x50\xf9\xc8\x45\x45\xfc\x98\xd7\x6e\xb9\x58\x23\xcd\x60\x5a\xfa\x52\x96\xd3\x8a\x95\x61\x33\x57\x86\x33\x1e\xb5\xcb\x57\x13\x79\x86\x1c\x32\xdb\x14\x38\xe4\x87\x42\x61\x33\xbc\x21\x05\xc7\x0c\x27\x12\xfd\x19\x33\xb2\x26\xd5\x73\x9c\x52\xb4\x13\x8f\x2a\x0a\x31\x2c\x72\x98\x44\x90\x83\x70\xb6\xf0\x9e\xc2\xc9\xe2\x33\x78\xf0\x1e\x27\xab\x79\x08\xa6\xab\x20\x10\x9c\x46\xad\xa5\x66\x5d\xad\x28\x4f\xdc\xc1\xc3\xb1\xf8\xb9\x2d\x7f\xc1\x78\xfc\x5b\xf9\x3b\x6c\x00\x06\x37\x9f\x9a\x9c\xcf\xfc\x07\xef\x6b\x95\xf3\xa8\xfa\x4b\x92\x68\xbd\x03\x4b\xbf\x1a\x04\xa3\x86\x0b\x11\xa5\x82\x56\xfe\xec\xcb\x4a\x8f\x95\x41\x07\x92\x25\xf8\x87\x16\x58\x46\x74\x6b\x8b\xd1\x14\x5f\x53\x5b\x19\xdc\x63\x0b\xfd\xef\x49\xa4\x8d\x12\xb9\xcc\x2e\x25\xe5\xc2\x6b\x4a\xfa\x9c\x44\xa2\x1e\xf7\xa4\x28\x44\x09\x5e\xc1\x8e\x7a\x6d\x13\xd8\x5d\x67\xfb\x0a\x5b\x01\x23\xda\x68\x63\x93\xd2\xb8\x52\x46\x95\x7a\xf9\x44\x5f\xb2\xf7\xae\xda\x0a\x60\xba\xf4\x9f\xc2\x60\x22\x96\x68\x12\x17\x95\x1c\xab\xf2\x7d\x5c\x06\xde\xec\x0f\xbf\xe4\x6c\xa4\x78\xb9\x01\x81\xf7\xe8\x89\xe9\x4d\xbd\x27\x2d\x21\x27\x93\xa8\xc1\xf7\xf2\xa9\x19\x55\x66\x3b\x9a\xb2\x4d\xaf\x15\x57\x0f\xa0\x9e\xa4\x29\x99\x52\x5e\x90\x73\x46\x62\xd1\xcb\xaf\x11\x8f\x12\x6a\xb7\xa5\x7d\xdf\xe1\xe3\xf7\xa6\x20\xee\xc6\x63\x35\xfe\x0c\xd3\x03\xb6\x8c\x6b\xfc\x1b\x33\xeb\xb4\x8f\x0e\xff\xea\xc5\x1d\xfe\xdb\x1e\xe1\xe2\xdf\x84\xef\xb5\x18\xcd\x68\xe3\xff\xd4\xf4\x6c\x08\xf5\x2c\x3f\x59\xf8\x17\xbb\x8a\x22\xde\x20\xd1\xa8\x4e\xca\xc8\x86\x64\x62\x2b\xc9\x36\x51\x8a\xa1\x6d\x33\x43\x87\x82\xd3\xbd\xc4\xa4\x09\xae\x60\xee\x95\x69\x43\xda\x80\x5f\x7f\x51\x83\x12\x26\x52\xfb\x4b\xe9\xad\xc6\x99\x1c\x8f\x8f\x72\x6a\xe5\xf8\xbd\x23\x41\xc2\xfe\x26\x99\xa9\x71\x2d\x79\x91\x53\xd2\xe8\xb4\xf0\xb9\x16\x24\x65\x88\xc0\xf4\xf5\xca\xd9\xc8\x44\x0c\xb3\x5d\xe4\xd8\x2e\xc4\x79\x82\x1e\xc4\x96\xb6\x15\xe7\x0e\x6c\xdb\xce\x11\x64\x49\x94\x1d\xf6\x71\xd7\x6a\xc6\xf7\x3d\xea\x6e\xba\xc5\x31\x74\x9b\xff\x37\x1d\xb4\x9b\x8b\x37\x29\x93\x16\xbd\x5f\x27\x8d\xcd\x29\xdf\xee\xdc\x0c\xf1\x6a\xe1\x27\x8b\x2d\x67\x74\x4d\x44\x73\xd5\xce\x79\x17\x89\x99\x13\x9e\x76\xcb\xc7\x70\xc0\x88\x66\x74\x4f\x50\x25\xe5\xc6\x71\xdc\x28\xb4\x3a\x07\xf6\xcc\xe6\xc6\xbc\xa5\x99\xd6\x6a\x7f\xae\xab\x2c\x49\x98\x38\xf6\xda\xea\x47\x56\x1f\x3b\xf6\x7a\xb9\x58\xe8\x33\xc9\x10\xee\x19\x10\xe1\x7d\x6f\xad\x0a\x1f\x04\x63\xb2\x98\xf4\x0a\xeb\x8f\x9b\x85\x63\xe1\xf5\x15\x4a\xa8\xca\xbe\x8e\xd9\xbc\xa7\x5a\x85\x5e\x02\x96\x29\x80\x91\xf2\xbb\x08\xb2\x61\xf2\x3c\x6a\xe3\x7a\x09\xb0\x96\x8a\xb3\xc8\x9a\xaf\x43\x49\xb6\x37\x38\x7a\xaf\xf5\x0d\x17\xc9\xa3\xbe\x12\x5d\xa4\x8d\x35\x61\x05\x77\xf5\xd7\x14\xba\x6d\x31\x61\x7c\x9b\xc0\xa3\x51\x5b\x1b\x9c\xc9\x56\x5c\x1d\x40\xf7\x30\xc5\xf2\xd0\xb9\xc6\xe5\x53\x5d\xaf\x38\x4d\xbb\x52\xd1\xee\x96\x8e\xf1\x5a\x43\xa1\xf7\x55\xed\x1a\xff\x90\xdc\xd0\x63\xe3\x9c\x95\x6c\x89\x5e\xd3\xb1\xdf\x8d\xdf\x5a\x75\xee\x06\xef\xf0\x70\x09\xb1\xce\xe0\xab\xa9\xb0\x01\xbc\x40\x82\xb5\xaf\x53\x7f\x7d\xb0\x93\xe2\xd3\xf0\x9c\xca\xeb\x41\x9e\x91\x5d\x8b\x79\x5e\x73\x3d\xec\x33\x82\x6b\xb1\x35\xb5\x59\xe4\x26\xcf\xf9\x0e\x89\xb5\xbb\xb8\xb9\x67\x9b\x37\x3b\xb7\xe7\x55\x67\x0b\xb3\xb0\xca\xd7\xfe\xc7\x62\x3a\x81\x78\xfd\x45\x4d\x3b\x22\x34\x88\x46\xce\xe5\x90\x7e\xab\x72\x44\xda\x6e\x05\x55\xa8\x9e\x46\xfd\x93\xdb\x83\xb8\x0b\xd7\x1f\xdd\x9a\x2f\x6e\x72\xf0\xa2\x6f\x6e\x02\x3b\x15\xd6\x18\xa2\xdd\xe0\xdf\x00\x00\x00\xff\xff\xeb\xcf\x24\xa3\xca\x13\x00\x00"

func dbMigrations20160117193701_user_baseSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations20160117193701_user_baseSql,
		"db/migrations/20160117193701_user_base.sql",
	)
}

func dbMigrations20160117193701_user_baseSql() (*asset, error) {
	bytes, err := dbMigrations20160117193701_user_baseSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/20160117193701_user_base.sql", size: 5066, mode: os.FileMode(420), modTime: time.Unix(1481529639, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"db/migrations/.gitignore": dbMigrationsGitignore,
	"db/migrations/20160117193701_user_base.sql": dbMigrations20160117193701_user_baseSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"db": &bintree{nil, map[string]*bintree{
		"migrations": &bintree{nil, map[string]*bintree{
			".gitignore": &bintree{dbMigrationsGitignore, map[string]*bintree{}},
			"20160117193701_user_base.sql": &bintree{dbMigrations20160117193701_user_baseSql, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

