// Code generated by go-bindata.
// sources:
// db/migrations/.gitignore
// db/migrations/20160117193701_user_base.sql
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dbMigrationsGitignore = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\xe2\x52\xd4\x4b\xcf\x2c\xc9\x4c\xcf\xcb\x2f\x4a\xe5\x02\x04\x00\x00\xff\xff\x17\xeb\x9a\xa9\x0e\x00\x00\x00"

func dbMigrationsGitignoreBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrationsGitignore,
		"db/migrations/.gitignore",
	)
}

func dbMigrationsGitignore() (*asset, error) {
	bytes, err := dbMigrationsGitignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/.gitignore", size: 14, mode: os.FileMode(420), modTime: time.Unix(1473232308, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dbMigrations20160117193701_user_baseSql = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x58\xcd\x6e\xe3\x36\x10\xbe\xeb\x29\x78\x93\x83\x6e\x00\x27\xe8\xf6\xd0\x9e\xdc\x44\x8b\x1a\xb5\x9d\xac\x57\x2a\x76\x4f\x5a\x8a\xa2\x6d\xc2\x12\x29\x90\x54\x12\xf7\xe9\x4b\xea\xdf\x14\x29\x1b\x48\x8b\xae\xe1\x83\x34\x33\xfc\xc4\xf9\xe6\x47\x43\x79\xb7\xb7\xe0\xa7\x9c\xec\x39\x94\x18\x44\x85\xbe\xfd\xf2\x79\x05\x08\x05\x02\x23\x49\x18\x05\x7e\x54\xf8\x80\x08\x80\xdf\x30\x2a\x25\x4e\xc1\xeb\x01\x53\x20\x0f\x4a\x54\xaf\xd3\x46\xea\x06\x16\x45\x46\x70\xea\x79\x0f\xdb\x60\x11\x06\x20\x5c\xfc\xbe\x0a\x00\x67\x19\x8e\x0b\xcc\x73\x22\x84\x32\xf4\x66\x1e\x50\x3f\x92\x82\xe5\x26\x9c\xdd\xdd\xdd\x80\xe7\xed\x72\xbd\xd8\x7e\x03\x7f\x06\xdf\xc0\xe6\x29\x04\x9b\x68\xb5\x02\x8b\x28\x7c\x8a\x97\x1b\x85\xb4\x0e\x36\xe1\x87\x6a\x4d\x85\x34\x58\xd8\x1a\xd7\xda\xfe\x11\xe0\xaf\xc5\xf6\xe1\x8f\xc5\x76\x76\xff\xf1\xe3\x4d\xad\x14\x88\x15\x18\x04\x9b\x68\x3d\xf3\xf7\x19\x4b\x60\xe6\x7f\x00\x7e\x01\x39\xa6\x52\x5f\xb1\x57\xea\x37\xa6\x88\x63\xc5\x44\x1a\x43\x09\xc2\xe5\x3a\xf8\x12\x2e\xd6\xcf\xe0\x31\xf8\xb4\x88\x56\x21\x78\x88\xb6\x5b\xb5\x9f\xb8\xd7\x9c\x6f\xa2\x2c\x52\xf7\x62\x7f\xae\x7e\xb7\xd5\x1f\xcc\xe7\xbf\x56\x7f\xbf\x03\xf0\x6e\x7e\x6b\x89\x8b\x36\xcb\xcf\x51\xa0\xfc\x7c\x0c\xbe\x9a\xfc\x29\x02\xe2\x92\xd0\x14\xbf\x81\xa7\x8d\xa9\x04\x33\x92\xf6\x30\xf6\xf5\x0d\x8b\xf1\xee\x68\x05\x68\xd4\x3d\x4a\x1f\x45\xf1\x8e\xd8\x51\x98\x63\x4b\x5c\x7e\x48\xb2\x47\x0c\x8b\x86\xd7\x73\x4a\x4a\x81\xb9\x7a\xb6\xe4\x24\x51\x55\xf1\x1e\x72\x2a\xa4\x7e\x61\x2d\xfc\x7e\xc4\xa7\xef\x1d\x65\x77\xf3\x79\x2b\x7f\x81\x59\x89\xcf\x35\x2e\x77\x8c\x2d\x9e\x7b\x66\x28\x6d\xb9\x63\xae\xd7\xf7\xa2\x4f\x9e\x11\x42\xe3\x88\x99\x3c\x95\x18\xf1\xbc\xa1\xc8\x70\xd7\x88\x2a\xe3\x64\x4f\xa8\x6a\x2a\x74\x1f\x67\x18\xa6\xb6\xac\x29\x85\x64\xb9\xc6\x64\x29\xae\x61\xee\x1b\xd5\x9e\xf4\x0b\x7e\xf9\xb9\x11\x6a\x98\x58\x48\x28\x4b\x51\x5b\x2b\xb9\xe7\x71\x2d\x4d\x4e\x7a\x63\x95\xf4\x7e\x9a\x46\x65\x16\x37\x3b\x37\x49\xd4\x08\x93\xbe\xef\x94\x43\x14\x11\x98\xfd\x7b\x49\x62\xb0\x96\x40\x7a\x8c\x1d\x45\x06\x11\x62\x25\x95\xf1\x81\x65\x29\xe6\x36\x3e\x21\x4f\x63\x5a\xe6\xc9\xb9\xd6\x5c\x3f\xb6\x68\xbb\xeb\x01\x27\xd0\xad\xb6\x15\xb9\xbb\x82\x27\x83\xd0\x11\x69\x89\x42\xa7\x73\x66\x72\xbf\xba\x0d\xe4\x20\x8f\x07\xcb\xa7\x42\x59\x70\xb6\x23\xaa\x49\x20\xc6\x0b\x56\xbf\xfb\xae\x4a\x6b\x49\x64\x66\x0b\x0e\x46\x8c\xb2\x9c\xa0\x41\x2e\xb7\x1d\x80\xe3\x3d\x11\xf2\x2c\xcd\x5b\x55\x71\x60\xd4\x10\xc1\x34\xe5\x58\x08\x1b\xff\x3a\x7a\xfc\x34\xea\x30\xca\x95\x17\x42\x11\x1e\x29\x10\x91\x63\xeb\x41\x14\x1f\x15\x27\x3a\x5e\xc3\x20\x0e\xe5\x9e\xc9\xfe\x80\xac\x9e\xc0\xfa\x21\xc3\x10\x58\xb8\x05\xb3\xc6\xee\x2a\xc8\xce\xd1\xcb\xa8\x9d\xe9\x35\xc0\x03\xa6\x2e\x22\x0f\x6c\x1d\x99\x6c\x7b\x82\xa3\xb3\x58\x9f\x70\x4d\x7a\xaa\x57\xba\x60\xb4\x6b\x38\xd3\xb9\xb9\x23\x5c\x48\x57\xf7\xc8\xa0\x5b\x97\x10\x2e\x0f\x29\x3c\x19\x19\xb1\xc7\x54\x37\x9a\x7a\xdc\x5a\xc3\x0c\xeb\x11\xeb\x13\xce\xf5\x55\x9b\x4d\x38\xcb\xea\x24\x1e\xa3\xba\xe4\x6d\x86\x87\xc1\xd7\xa6\x27\xfe\x4d\x8a\xba\x38\xc6\xc6\xb4\x22\x4b\x95\xfa\x99\xfe\x6e\xfe\x5f\xd7\x84\x7b\x46\x19\x59\x8c\xca\xa4\x0d\xda\x35\x35\xd2\xda\x3a\x0b\x64\x0c\x36\x59\x1d\x03\x3c\x67\x69\x8c\x20\x2f\xd4\x45\x8f\x79\xb9\x28\x46\xd8\x17\x2a\xa2\xc7\x9e\x2a\x07\x3d\xbd\x39\x4a\xa0\x1f\x14\x7d\x23\x66\xe6\x39\xc3\x6d\x69\x7b\xb3\x8d\xa2\xda\x6d\xc4\x18\xbd\x3b\xb9\x73\xe8\xae\xc6\xad\x77\x8c\x0c\xaa\xe2\x48\x66\x2b\x30\x28\xc4\x2b\xe3\xb6\xd1\x4a\x8d\x08\xb1\x55\xdd\xb1\x50\x3d\xad\x1b\x0c\x54\x3d\xc6\x92\x1d\xb1\xf5\xd0\xc5\x4a\x8e\xda\x53\x97\x9a\x91\x74\x17\x40\x19\x41\xc7\x13\x4c\xda\x3e\x50\x91\x20\x4f\xdd\xe1\xac\x0d\x6b\x65\xdb\x37\x3d\xbf\xdb\xb9\x3e\xb1\x8d\xea\x10\xbe\x40\x09\xad\x93\x49\x3d\xf4\xd5\xd8\xed\xfb\x14\xa7\x1a\xfd\x05\x73\xb2\x23\xf5\x75\x92\x31\x74\x54\x97\xff\xf3\xa9\x04\xa8\xee\x1e\x3d\xeb\x3e\xa1\x46\x5c\x5e\x79\x2a\x49\x8e\x95\x13\x79\x61\x4d\x2b\xeb\x44\xae\xe6\xf0\x8e\xa6\xa9\x59\x6a\x54\x5b\xdd\x31\xe7\xec\x93\xc0\xa3\x3a\x1b\xb7\x1f\x05\xba\x2f\x02\x5a\x78\xd5\x37\x01\x95\xd9\x99\xd2\x26\x10\x1d\xbd\x7f\x02\x00\x00\xff\xff\x7e\xec\x7e\x01\x6a\x10\x00\x00"

func dbMigrations20160117193701_user_baseSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations20160117193701_user_baseSql,
		"db/migrations/20160117193701_user_base.sql",
	)
}

func dbMigrations20160117193701_user_baseSql() (*asset, error) {
	bytes, err := dbMigrations20160117193701_user_baseSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/20160117193701_user_base.sql", size: 4202, mode: os.FileMode(420), modTime: time.Unix(1480933817, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"db/migrations/.gitignore": dbMigrationsGitignore,
	"db/migrations/20160117193701_user_base.sql": dbMigrations20160117193701_user_baseSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"db": &bintree{nil, map[string]*bintree{
		"migrations": &bintree{nil, map[string]*bintree{
			".gitignore": &bintree{dbMigrationsGitignore, map[string]*bintree{}},
			"20160117193701_user_base.sql": &bintree{dbMigrations20160117193701_user_baseSql, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

